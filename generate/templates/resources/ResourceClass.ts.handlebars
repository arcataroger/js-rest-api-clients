import * as Utils from '@datocms/rest-client-utils';
import * as SchemaTypes from '../SchemaTypes';
import * as SimpleSchemaTypes from '../SimpleSchemaTypes';
import BaseResource from '../../BaseResource';

export default class {{{resourceClassName}}} extends BaseResource {
  static readonly TYPE: '{{jsonApiType}}' = '{{jsonApiType}}';

  {{#each endpoints}}
    {{#if simpleMethodAvailable}}
      /**
      * {{{comment}}}
      {{#if docUrl}}
      *
      * Read more: {{{docUrl}}}
      {{/if}}
      *
      * @throws {ApiError}
      * @throws {TimeoutError}
      {{#if deprecated}}
      *
      * @deprecated {{{deprecated}}}
      {{/if}}
      */
      {{{name}}}(
        {{#if urlPlaceholder}}
          {{{urlPlaceholder.variableName}}}: string | SimpleSchemaTypes.{{{urlPlaceholder.relType}}},
        {{/if}}
        {{#if requestBodyType}}
          body: SimpleSchemaTypes.{{{requestBodyType}}},
        {{/if}}
        {{#if queryParamsType}}
          queryParams{{#unless queryParamsRequired}}?{{/unless}}: SimpleSchemaTypes.{{{queryParamsType}}},
        {{/if}}
      ) {
        return this.{{{rawName}}}(
            {{#if urlPlaceholder}}
              Utils.toId({{{urlPlaceholder.variableName}}}),
            {{/if}}
            {{#if requestBodyType}}
              Utils.serializeRequestBody<SchemaTypes.{{{requestBodyType}}}>(
                body,
                {
                  {{#if urlPlaceholder.isEntityId}}
                    id: Utils.toId({{{urlPlaceholder.variableName}}}),
                  {{/if}}
                  type: {{{stringify requestStructure.type}}},
                  attributes: {{{stringify requestStructure.attributes}}},
                  relationships: {{{stringify requestStructure.relationships}}},
                },
              ),
            {{/if}}
            {{#if queryParamsType}}
              queryParams,
            {{/if}}
          )
          {{#if responseType}}
          .then(body => Utils.deserializeResponseBody<SimpleSchemaTypes.{{{responseType}}}>(body))
          {{/if}}
        ;
      }
    {{/if}}

  /**
   * {{{comment}}}
   {{#if docUrl}}
   *
   * Read more: {{{docUrl}}}
   {{/if}}
   *
   * @throws {ApiError}
   * @throws {TimeoutError}
   {{#if deprecated}}
   *
   * @deprecated {{{deprecated}}}
  {{/if}}
   */
  {{{rawName}}}(
    {{#if urlPlaceholder}}
      {{{urlPlaceholder.variableName}}}: string,
    {{/if}}
    {{#if requestBodyType}}
      body: SchemaTypes.{{{requestBodyType}}},
    {{/if}}
    {{#if queryParamsType}}
      queryParams{{#unless queryParamsRequired}}?{{/unless}}: SchemaTypes.{{{queryParamsType}}},
    {{/if}}
  ): Promise<
    {{#if responseType}}
      SchemaTypes.{{{responseType}}}
    {{else}}
      void
    {{/if}}
  > {
    return this.client.request<
      {{#if responseType}}
        SchemaTypes.{{{responseType}}}
      {{else}}
        void
      {{/if}}
    >({
      method: '{{method}}',
      url: `{{urlTemplate}}`,
      {{#if requestBodyType}}
        body,
      {{/if}}
      {{#if queryParamsType}}
        queryParams,
      {{/if}}
    });
  }

  {{#if paginatedResponse}}
    {{#if simpleMethodAvailable}}

    /**
    * Async iterator to auto-paginate over elements returned by {{{name}}}()
    {{#if docUrl}}
    *
    * Read more: {{{docUrl}}}
    {{/if}}
    *
    * @throws {ApiError}
    * @throws {TimeoutError}
    */
      async *{{{name}}}PagedIterator(
        {{#if urlPlaceholder}}
          {{{urlPlaceholder.variableName}}}: string | SimpleSchemaTypes.{{{urlPlaceholder.relType}}},
        {{/if}}
        queryParams{{#unless queryParamsRequired}}?{{/unless}}: SimpleSchemaTypes.{{{queryParamsType}}},
        iteratorOptions?: Utils.IteratorOptions,
      ) {
        for await (const element of this.{{{rawName}}}PagedIterator(
          {{#if urlPlaceholder}}
            Utils.toId({{{urlPlaceholder.variableName}}}),
          {{/if}}
          queryParams,
          iteratorOptions,
        )) {
          yield Utils.deserializeJsonEntity<
            SimpleSchemaTypes.{{{responseType}}}[0]
          >(element);
        }
      }
    {{/if}}

  /**
   * Async iterator to auto-paginate over elements returned by {{{rawName}}}()
   {{#if docUrl}}
   *
   * Read more: {{{docUrl}}}
   {{/if}}
   *
   * @throws {ApiError}
   * @throws {TimeoutError}
   */
    {{{rawName}}}PagedIterator(
      {{#if urlPlaceholder}}
        {{{urlPlaceholder.variableName}}}: string,
      {{/if}}
      queryParams{{#unless queryParamsRequired}}?{{/unless}}: SchemaTypes.{{{queryParamsType}}},
      iteratorOptions?: Utils.IteratorOptions,
    ) {
      return Utils.rawPageIterator<
        SchemaTypes.{{{responseType}}}['data'][0]
      >(
        {
          defaultLimit: {{{paginatedResponse.defaultLimit}}},
          maxLimit: {{{paginatedResponse.maxLimit}}},
        },
        (page: SchemaTypes.{{{queryParamsType}}}['page']) => this.{{{rawName}}}(
          {{#if urlPlaceholder}}
            {{{urlPlaceholder.variableName}}},
          {{/if}}
          { ...queryParams, page },
        ),
        iteratorOptions,
      );
    }
  {{/if}}

  {{/each}}
}
